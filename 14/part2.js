const width = 101
const height = 103
const tree = [
    "###############################",
    "#.............................#",
    "#.............................#",
    "#.............................#",
    "#.............................#",
    "#..............#..............#",
    "#.............###.............#",
    "#............#####............#",
    "#...........#######...........#",
    "#..........#########..........#",
    "#............#####............#",
    "#...........#######...........#",
    "#..........#########..........#",
    "#.........###########.........#",
    "#........#############........#",
    "#..........#########..........#",
    "#.........###########.........#",
    "#........#############........#",
    "#.......###############.......#",
    "#......#################......#",
    "#........#############........#",
    "#.......###############.......#",
    "#......#################......#",
    "#.....###################.....#",
    "#....#####################....#",
    "#.............###.............#",
    "#.............###.............#",
    "#.............###.............#",
    "#.............................#",
    "#.............................#",
    "#.............................#",
    "#.............................#",
    "###############################",
];

const input = Array
    .from(require('fs')
        .readFileSync(0, 'utf-8')
        .trim()
        .matchAll(/p=(-?\d+),(-?\d+).+?(-?\d+),(-?\d+)/g))
    .map(match => match.map(Number))
    .map(([, px, py, vx, vy]) => ({px, py, vx, vy}));

function test(steps) {
    let area = new Array(height).fill().map(() => new Array(width).fill("."));

    for(const {px, py, vx, vy} of input) {
        const x = (width * steps + px + vx * steps) % width;
        const y = (height * steps + py + vy * steps) % height;

        area[y][x] = '#';
    }

    return area
        .map(row => row.join(""))
        .some((_, y, lines) =>
            y + tree.length < height &&
            tree.every((line, i) => lines[i + y].includes(line))
        );
}

let steps = 0;

while(!test(steps)) {
    steps++;
}

console.log(steps)
